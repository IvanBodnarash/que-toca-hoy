@baseUrl = http://localhost:3000

##recordatorio: hay algunos que dan error senzillamente por
## intentar crear un grupo con usuario 1 y ya van por el 6, 
## habiendo borrado el 1, solo lo puedes recuperar borrando
## tabla y empezando la prueba de 0

## todo lo que no pone error funciona


@token = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZFVzZXIiOjksInVzZXJuYW1lIjoibmV3LnVzZXIiLCJpYXQiOjE3NTYzMDczNDQsImV4cCI6MTc1NjMwODI0NH0.H_0jfU0U3Tj1aR7borM0sM1riExZ4fdwQr5nt4ZgGec


##base
### listar tareas de usuario por ID
GET {{baseUrl}}/user/1/taskDated

### asignar tarea a usuario por ID - en teoría todo bien, da error porque ya en el controller no consigue leer los datos
POST {{baseUrl}}/user/1/taskDated
Content-Type: application/json

{
    "idUser": 1,
    "idTaskDated": 1
}

### listar grupos de usuario por ID
GET {{baseUrl}}/user/1/group

### asignar grupo a usuario por ID  
POST {{baseUrl}}/user/1/group
Content-Type: application/json

{
    "idGroup": 1
}

### eliminar grupo de usuario por ID  - dona error 500, creo que falta la relacion muchos a muchos entre user y group 

DELETE {{baseUrl}}/user/1/group/1





// he mirado y faltaria poner la relacion muchos a muchos entre user y grupos en el index.model, no?
// User.belongsToMany(Group, { through: 'usergroups', foreignKey: 'idUser', otherKey: 'idGroup' });
// Group.belongsToMany(User, { through: 'usergroups', foreignKey: 'idGroup', otherKey: 'idUser' });



## user

### post user 1
POST {{baseUrl}}/user
Content-Type: application/json

{

    "name": "Usuario 2",
    "email": "usuario2@correo.com",
    "username": "usuario2",
    "password": "159951"
}

### register

POST {{baseUrl}}/auth/register
Content-Type: application/json

{
  "name": "New Userr",
  "email": "someuser@mail.com",
  "username": "new.user",
  "password": "123456"
}

### login
POST {{baseUrl}}/auth/login
Content-Type: application/json

{
  "username": "new.user",
  "password": "123456"
}

### get user 1

GET {{baseUrl}}/user/1
Authorization: Bearer {{token}}

### get (listar) users

GET {{baseUrl}}/user
Authorization: Bearer {{token}}

### update user por ID
PUT {{baseUrl}}/user/1
Content-Type: application/json

{
    "name": "Usuario Actualizado",
    "email": "actualizado@correo.com"
}

### delete user por ID  - dona error (esperable)
DELETE {{baseUrl}}/user/1

// Nota: actualmente no se puede borrar un usuario si tiene tareas relacionadas (tasksdated) 
// por la FK. Hay que arreglarlo más adelante, borrando las tareas antes o usando ON DELETE CASCADE.




### subir img user

POST {{baseUrl}}/user/1/upload
Content-Type: multipart/form-data; boundary=boundary123

--boundary123
Content-Disposition: form-data; name="file"; filename="12-01-2025-13-26-47.png"
Content-Type: image/png

< C:/Users/elena/Pictures/DREDGE/Screenshots/12-01-2025-13-26-47.png
--boundary123--

### subir img user

POST {{baseUrl}}/user/1/upload
Content-Type: multipart/form-data; boundary=boundary123

--boundary123
Content-Disposition: form-data; name="file"; filename="12-01-2025-13-26-47.png"
Content-Type: image/png

< C:/Users/elena/Pictures/DREDGE/Screenshots/14-01-2025-9-34-14.png
--boundary123--




## grupo

### get (listar) groups
GET {{baseUrl}}/group

### crear grupo 1    ---por si va por el dos o adelante, los nuevos se generan con los siguientes id
POST {{baseUrl}}/group
Content-Type: application/json
Authorization: Bearer {{token}}

{
    "name": "Nuevo Grupo",
    "description": "Descripción de prueba"
}

### crear grupo
POST {{baseUrl}}/group
Content-Type: application/json

{
    "name": "Nuevo Grupo",
    "description": "Descripción de prueba"
}

### obtener grupo por ID
GET {{baseUrl}}/group/1

### update grupo por ID
PUT {{baseUrl}}/group/createWithPin
Content-Type: application/json
Authorization: Bearer {{token}}

{
    "name": "Grupo Actualizado",
}

### delete grupo por ID 
DELETE {{baseUrl}}/group/1

### subir img group por ID grupo
POST {{baseUrl}}/group/1/upload
Content-Type: multipart/form-data; boundary=boundary123

--boundary123
Content-Disposition: form-data; name="file"; filename="12-01-2025-13-26-47.png"
Content-Type: image/png

< C:/Users/elena/Pictures/DREDGE/Screenshots/12-01-2025-13-26-47.png
--boundary123--


### obtener usuarios de grupo
GET {{baseUrl}}/group/1/users

### obtener tareas de grupo
GET {{baseUrl}}/group/1/tasks

### crear materiales de grupo
POST {{baseUrl}}/material
Content-Type: application/json

{
  "name": "Nuevo Material",
  "description": "Descripción",
  "groupId": 1
}
### obtener materiales de grupo
GET {{baseUrl}}/material?groupId=1

### crear plantilla tarea de grupo
POST {{baseUrl}}/group/1/templates
Content-Type: application/json

{
    "name": "Nueva Plantilla",
    "description": "Descripción de la plantilla",
    "steps": "Paso 1, Paso 2, Paso 3"
}



### obtener plantillas de tareas de grupo
GET {{baseUrl}}/group/1/templates

### obtener imagen de grupo   - da null
GET {{baseUrl}}/group/1/image


### obtener imagen de grupo   - da null
GET {{baseUrl}}/group/1/image


## buyList (material routes)

### obtener plantillas de material por ID
GET {{baseUrl}}/material/1/templates

### obtener lista de compras
GET {{baseUrl}}/buyList

###Comprobar si lo d'abaix és necessari (fins a fila de #)

### crear item en lista de compras  -  Error de clave foránea: el idTaskDated indicado no existe en TaskDated
POST {{baseUrl}}/buyList
Content-Type: application/json

{
    "idTaskDated": 1,
    "idMaterial": 1,
    "quantity": 1,
    "unit": "ud"
}

### obtener item por ID
GET {{baseUrl}}/buyList/1

### actualizar item por ID       
PUT {{baseUrl}}/buyList/1
Content-Type: application/json

{
    "idTaskDated": 1,
    "idMaterial": 1,
    "quantity": 2,
    "unit": "ud"
}

### eliminar item por ID      
DELETE {{baseUrl}}/buyList/1

### obtener lista de compras por task ID
GET {{baseUrl}}/buyList/task/1

### obtener lista de compras por material ID 
GET {{baseUrl}}/buyList/material/1

#######################################

## material task templates  -  faltan controllers, no?

### obtener materiales por plantilla ID
GET {{baseUrl}}/material/1/templates

### obtener plantillas de tareas por material ID
GET {{baseUrl}}/material/1/templates



## tareas (calendarizadas) taskdated  

### obtener usuarios de tarea por ID  
GET {{baseUrl}}/task/1/users


### obtener lista de compras de tarea por ID
GET {{baseUrl}}/task/1/buyList



## task template

### Obtener tareas agendadas (taskDated) de taskTemplate
GET {{baseUrl}}/taskTemplate/1/taskDated

### listar todos taskTemplate por tipo pasado como variable (tarea o receta)
GET {{baseUrl}}/taskTemplate?type=tarea

### listar todos taskTemplate por tipo pasado como variable (tarea o receta) por ID de grupo - 500 error fetching tasks (no sé como sobreescribirlo)
GET {{baseUrl}}/tasktemplate/group/1/task

## userTask

### listar todas las tareas "de usuario" (todos los usuarios)
GET {{baseUrl}}/userTask

### crear tarea de usuario - si da error es porque el idTaskDated 
###que estás intentando usar no existe en la tabla TaskDated, 
###violando la restricción de clave foránea.
POST {{baseUrl}}/userTask/assign
Content-Type: application/json

{
    "idUser": 1,
    "idTaskDated": 1
}

### get user 1
GET {{baseUrl}}/user/1

### obtener tarea de usuario por ID de tarea
GET {{baseUrl}}/userTask/1

### actualizar tarea de usuario por ID
PUT {{baseUrl}}/userTask/1
Content-Type: application/json

{
    "idUser": 1,
    "idTaskDated": 1,
    "createdAt": "2025-08-20"
}
### eliminar tarea de usuario por ID
DELETE {{baseUrl}}/userTask/1
